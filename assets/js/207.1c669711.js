(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{1356:function(t,s,a){"use strict";a.r(s);var n=a(24),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"you-need-to-type-an-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#you-need-to-type-an-object"}},[t._v("#")]),t._v(" You Need To Type An Object")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("// Chainable options are commonly used "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" Javascript. But when we switch to TypeScript, can you properly "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" it?\n// In this challenge, you need to "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" an object or a class - whatever you like - to provide two "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key, value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" and get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(". In option, you can extend the current config "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" by the given key and value. We should about to access the final result via get.\n// For example\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("declare")]),t._v(" const config: Chainable\nconst result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" config.option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'type-challenges'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value: "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n// "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),t._v(" the "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" of result to be:interface Result "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("foo: numbername: stringbar: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value: string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("You don"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t need to write any js/ts logic to handle the problem - just in type level.\n// You can assume that key only accepts string and the value can be anything - just leave it as-is. Same key won'")]),t._v("t be passed twice.\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("declare")]),t._v(" const config: Chainable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconst result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" config\n  .option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  .option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type-challenges"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  .option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value: "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  .get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n// "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" Chainable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n//   option"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("K extends string, V"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key: K, value: V"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": Chainable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("P "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(": V "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n//   get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n// "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" Chainable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  option"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("K extends string, V"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    key: K,\n    value: V\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": Chainable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Omit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T, K"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("P "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(": V "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);