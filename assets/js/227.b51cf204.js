(window.webpackJsonp=window.webpackJsonp||[]).push([[227],{1386:function(t,a,s){"use strict";s.r(a);var e=s(24),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react17与react18的更新变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react17与react18的更新变化"}},[t._v("#")]),t._v(" React17与React18的更新变化")]),t._v(" "),a("h2",{attrs:{id:"react17-更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react17-更新"}},[t._v("#")]),t._v(" React17 更新")]),t._v(" "),a("blockquote",[a("p",[t._v("首先，官方发布日志称React17最大的特点就是无新特性，这个版本主要目标是让React能渐进式升级，允许多版本混用共存，为更远的未来版本做准备，")])]),t._v(" "),a("h3",{attrs:{id:"去除事件池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#去除事件池"}},[t._v("#")]),t._v(" 去除事件池")]),t._v(" "),a("p",[t._v("在React17之前，如果使用异步的方式来获取事件的e对象，会发现合成事件被销毁，")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时 e 可能已经被销毁，输出 undefined 或空字符串")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("Warning: This synthetic event is reused for performance reasons.")]),t._v(" "),a("blockquote",[a("p",[t._v("事件池：合成事件对象会被放入池中统一管理，这意味着合成事件对象可以被复用，当所有属性都会被回收释放置空。")])]),t._v(" "),a("p",[t._v("事件池的好处是在较浏览器中重用了不同事件的事件对象以提高性能，但它对浏览器的性能优化微乎其微，反而给开发者带来了困惑，因此没有了事件复用机制。")]),t._v(" "),a("h3",{attrs:{id:"更贴近原声浏览器事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更贴近原声浏览器事件"}},[t._v("#")]),t._v(" 更贴近原声浏览器事件")]),t._v(" "),a("p",[t._v("对事件系统进行了一些较小的更改：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("onScroll")]),t._v(" 事件不再冒泡，以防止出现常见的混淆")]),t._v(" "),a("li",[t._v("React的onFocus和onBlur 事件已在底层切换为原生的focusin和focusout 事件。他们更接近React现有行为，有时会提供额外信息。")])]),t._v(" "),a("blockquote",[a("p",[t._v("blur、focus和focusin、focusout的区别：blur、focus不支持冒泡，focusin、focusout支持冒泡")])]),t._v(" "),a("ul",[a("li",[t._v("捕获事件（例如：onClickCapture）现在使用的是实际浏览器的捕获监听器。")])]),t._v(" "),a("p",[t._v("这些更改会是React与浏览器行为更接近，并提高了互操作性。")]),t._v(" "),a("blockquote",[a("p",[t._v("尽管React17底层已将onFocus事件从Focus切换为focusin，但请注意，这并未影响冒泡行为，onFocus事件总是冒泡，在React17中会继续保持，因此通常它是一个更有用的默认值。")])]),t._v(" "),a("h3",{attrs:{id:"全新的jsx转换器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全新的jsx转换器"}},[t._v("#")]),t._v(" 全新的jsx转换器")]),t._v(" "),a("p",[t._v("总结下来就是两点：")]),t._v(" "),a("ul",[a("li",[t._v("用"),a("code",[t._v("jsx()")]),t._v("函数替换"),a("code",[t._v("React.createElement()")])]),t._v(" "),a("li",[t._v("运行时自动引入"),a("code",[t._v("jsx()")]),t._v("函数，无需手动引入react")])]),t._v(" "),a("p",[t._v("在v16中，我们写了一个React组件，总要引入")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),t._v("\n")])])]),a("p",[t._v("这是因为在浏览器中无法直接使用jsx，所以要借助工具如"),a("code",[t._v("@babel/preset-react")]),t._v("将jsx语法转换为"),a("code",[t._v("React.createElement")]),t._v("的js代码，所以需要显式引入React，才能正常调用createElement。\n通过"),a("code",[t._v("React.createElement()")]),t._v("创建元素是比较繁琐的，本身也存在一些问题，无法做到性能优化，在v17之后，React与babel官方合作，直接通过将"),a("code",[t._v("react/jsx-runtime")]),t._v("对jsx语法进行了新的转换而不依赖"),a("code",[t._v("React.createElement")]),t._v(",因此v17使用jsx语法可以不引入React，应用程序依然能正常运行。")]),t._v(" "),a("h3",{attrs:{id:"副作用清理时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副作用清理时机"}},[t._v("#")]),t._v(" 副作用清理时机")]),t._v(" "),a("ul",[a("li",[t._v("v17 之前的清理机制：")])]),t._v(" "),a("p",[t._v("在 React v17 之前，useEffect 的清理函数（即返回的函数）是 同步执行 的。当组件卸载或重新渲染时，React 会同步调用清理函数。\n这种同步行为对于一些复杂的应用（如大规模的渲染或屏幕切换）来说，可能会影响性能。")]),t._v(" "),a("ul",[a("li",[t._v("v17 之后的清理机制：")])]),t._v(" "),a("p",[t._v("从 React v17 开始，清理函数的执行是 异步的，即它会在屏幕更新后异步执行清理操作。\n如果副作用是与屏幕渲染无关的逻辑，这种异步清理方式能够提高渲染性能，特别是在过渡动画等情况下。")]),t._v(" "),a("ul",[a("li",[t._v("顺序保障：")])]),t._v(" "),a("p",[t._v("在 React v17 中，清理函数始终在新的副作用执行之前完成（这是确保副作用依赖被正确清理的一种方式）。\n而在 React 16 及之前版本，清理函数在组件更新前被同步执行。")]),t._v(" "),a("ul",[a("li",[t._v("someRef.current 的问题：")])]),t._v(" "),a("p",[t._v("图片提到了一个与 ref 相关的问题。由于 ref 是可变的，它在组件的整个生命周期内都可以被更新。当你在清理函数中使用 someRef.current 时，可能会出现 current 为 null 或变为其他值的情况。\n为了避免这种问题，通常可以在 useEffect 的副作用中保存当前的 ref，以确保清理函数中的 ref 值是稳定的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保持当前 someRef 的引用")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" someRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 副作用逻辑")]),t._v("\n  instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someSetupMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清理副作用")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someCleanupMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用保存的 instance 进行清理，避免 ref 变为 null 的问题")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"返回一致的undefined错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回一致的undefined错误"}},[t._v("#")]),t._v(" 返回一致的undefined错误")]),t._v(" "),a("p",[t._v("在vI7以前，组件返回"),a("code",[t._v("undefined")]),t._v("始终是一个错误。但是有漏网之鱼，React只对类组件和函数组件执行此操作，但并不会检查"),a("code",[t._v("forwardRef")]),t._v("和"),a("code",[t._v("memo")]),t._v("组件的返回值，\n在v7中修复了这个问题，forwardRef和memo组件的行为会与常规函数组件和类组件保持一致，在返回undefined时会报错")]),t._v(" "),a("h3",{attrs:{id:"原生组件栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原生组件栈"}},[t._v("#")]),t._v(" 原生组件栈")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("v16中错误调用钱的缺点：")]),t._v(" "),a("ul",[a("li",[t._v("缺少源码位置追溯，在控制台无法点击跳转到到出错的地方")]),t._v(" "),a("li",[t._v("无法适用于生产环境")])])])]),t._v(" "),a("p",[t._v("整体来说不如原生的JavaScript调用钱，不同于常规压缩后的JavaScript调用栈，它们可以通过sourcemap的形式自动恢复到原始函数的位置，而使用React组件栈，在生产环境下必须在调用战信息和bundle大小间进行选择，\n在v17使用了不同的机制生成组件调用钱，直接从JavaScript原生错误栈生成的，所以在生产环境也能按sourcemap还原回来，且支持点击跳到源码位置。")]),t._v(" "),a("h3",{attrs:{id:"移除私有导出api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除私有导出api"}},[t._v("#")]),t._v(" 移除私有导出API")]),t._v(" "),a("p",[t._v("v17删除了一些私有APl,主要是React Native for Web使用的\n另外，还别除了ReactTestUtil.SimulateNative工具方法，因为其行为与语义不符，如果你想要一种简便的方式来触发测试中原生浏览器的事件，可直接使用React Testing Library")]),t._v(" "),a("h3",{attrs:{id:"启发式更新算法更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启发式更新算法更新"}},[t._v("#")]),t._v(" 启发式更新算法更新")]),t._v(" "),a("p",[t._v("引用React17新特性：启发式更新算法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("React16的expirationTimes模型只能区分是否>=expirationTimes决定节点是否更新，")])]),t._v(" "),a("li",[a("p",[t._v("React17的lanes模型可以选定一个更新区间，并且动态的向区间中增减优先级，可以处理更细粒度的更新。")])])]),t._v(" "),a("h2",{attrs:{id:"react18-更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react18-更新"}},[t._v("#")]),t._v(" React18 更新")]),t._v(" "),a("h3",{attrs:{id:"并发模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发模式"}},[t._v("#")]),t._v(" 并发模式")]),t._v(" "),a("p",[t._v("V18的新特性是使用现代浏览器的特性构建的，彻底放弃对E的支特。\nv17和v18的区别就是：从同步不可中断更新变成了异步可中断更新，V17可以通过一些试验性的AP开启并发模式，而V18则全面开启并发模式。")]),t._v(" "),a("blockquote",[a("p",[t._v("并发模式可帮助应用保持响应，并根据用户的设备性能和网速进行适当的调整。该模式通过使渲染可中断来修复阻塞渲染限制，在Concurrent模式中，React可以同时更新多个状态。")])]),t._v(" "),a("p",[t._v("这里参考下文区分几个概念：")]),t._v(" "),a("ul",[a("li",[t._v("并发模式是实现并发更新的基本前提")]),t._v(" "),a("li",[t._v("V18中，以是否使用并发特性作为是否开启并发更新的依据。")]),t._v(" "),a("li",[t._v("并发特性指开启并发模式后才能使用的特性，比如：useDefrredvalue/useTransition")])]),t._v(" "),a("p",[t._v("可阅读参考Concurrent Mode(并发模式)")]),t._v(" "),a("h3",{attrs:{id:"更新render-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新render-api"}},[t._v("#")]),t._v(" 更新Render API")]),t._v(" "),a("p",[t._v("v18使用ReactDOM.createRoot()创建一个新的根元素进行渲染，使用该APL,会自动启用并发模式。如果你升级到vM8,但没有使用ReactDOM.createRoot()代替\nReactDO州.render()时，控制台会打印错误日志要提醒你使用React,该警告也意味此项变更没有造成breaking change,而可以并存，当然尽量是不建议。")]),t._v(" "),a("h3",{attrs:{id:"自动批处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动批处理"}},[t._v("#")]),t._v(" 自动批处理")]),t._v(" "),a("h3",{attrs:{id:"suspense-支持ssr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suspense-支持ssr"}},[t._v("#")]),t._v(" Suspense 支持ssr")]),t._v(" "),a("h3",{attrs:{id:"starttransition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#starttransition"}},[t._v("#")]),t._v(" startTransition")]),t._v(" "),a("h3",{attrs:{id:"usetransition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usetransition"}},[t._v("#")]),t._v(" useTransition")]),t._v(" "),a("h3",{attrs:{id:"usedeferredvalue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usedeferredvalue"}},[t._v("#")]),t._v(" useDeferredValue")]),t._v(" "),a("h3",{attrs:{id:"useid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useid"}},[t._v("#")]),t._v(" useId")]),t._v(" "),a("h3",{attrs:{id:"提供给第三方库的hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提供给第三方库的hook"}},[t._v("#")]),t._v(" 提供给第三方库的Hook")]),t._v(" "),a("p",[t._v("useSyncExternalStore")]),t._v(" "),a("p",[t._v("useInsertionEffect")])])}),[],!1,null,null,null);a.default=n.exports}}]);