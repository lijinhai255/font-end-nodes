(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{1222:function(n,e,t){"use strict";t.r(e);var o=t(24),s=Object(o.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"es2016"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es2016"}},[n._v("#")]),n._v(" ES2016")]),n._v(" "),e("h3",{attrs:{id:"includes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#includes"}},[n._v("#")]),n._v(" includes")]),n._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// ECMAScript 2016\n\n// Array.prototype.includes -----------------------------------\n\n// const arr = ['foo', 1, NaN, false]\n\n// 找到返回元素下标\n// console.log(arr.indexOf('foo'))\n// 找不到返回 -1\n// console.log(arr.indexOf('bar'))\n// 无法找到数组中的 NaN\n// console.log(arr.indexOf(NaN))\n\n// 直接返回是否存在指定元素\n// console.log(arr.includes('foo'))\n// 能够查找 NaN\n// console.log(arr.includes(NaN))\n\n// 指数运算符 ---------------------------------------------------\n\n// console.log(Math.pow(2, 10))\n\nconsole.log(2 ** 10)\n\n")])])]),e("h2",{attrs:{id:"ecmascript-2017"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-2017"}},[n._v("#")]),n._v(" ECMAScript 2017")]),n._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// ECMAScript 2017\n\n// const obj = {\n//   foo: 'value1',\n//   bar: 'value2'\n// }\n\n// Object.values -----------------------------------------------------------\n\n// console.log(Object.values(obj))\n\n// Object.entries ----------------------------------------------------------\n\n// console.log(Object.entries(obj))\n\n// for (const [key, value] of Object.entries(obj)) {\n//   console.log(key, value)\n// }\n\n// console.log(new Map(Object.entries(obj)))\n\n// Object.getOwnPropertyDescriptors ----------------------------------------\n\n// const p1 = {\n//   firstName: 'Lei',\n//   lastName: 'Wang',\n//   get fullName () {\n//     return this.firstName + ' ' + this.lastName\n//   }\n// }\n\n// // console.log(p1.fullName)\n\n// // const p2 = Object.assign({}, p1)\n// // p2.firstName = 'zce'\n// // console.log(p2)\n\n// const descriptors = Object.getOwnPropertyDescriptors(p1)\n// // console.log(descriptors)\n// const p2 = Object.defineProperties({}, descriptors)\n// p2.firstName = 'zce'\n// console.log(p2.fullName)\n\n// String.prototype.padStart / String.prototype.padEnd  --------------------\n\n// const books = {\n//   html: 5,\n//   css: 16,\n//   javascript: 128\n// }\n\n// // for (const [name, count] of Object.entries(books)) {\n// //   console.log(name, count)\n// // }\n\n// for (const [name, count] of Object.entries(books)) {\n//   console.log(`${name.padEnd(16, '-')}|${count.toString().padStart(3, '0')}`)\n// }\n\n// 在函数参数中添加尾逗号  -----------------------------------------------------\n\n// function foo (\n//   bar,\n//   baz,\n// ) {\n\n// }\n\n// const arr = [\n//   100,\n//   200,\n//   300,\n// ]\n// const arr = [\n//   100,\n//   200,\n//   300,\n//   400,\n// ]\n// const arr = [\n//   100,\n//   200,\n//   300\n// ]\n// const arr = [\n//   100,\n//   200,\n//   300,\n//   400\n// ]\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);